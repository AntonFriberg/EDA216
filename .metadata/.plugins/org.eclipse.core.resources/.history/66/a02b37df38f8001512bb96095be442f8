
//http://www.codejava.net/java-se/swing/how-to-use-jdatepicker-to-display-calendar-component
//såhär skriver man för att skriva ut meddelanden i understa panelen.
//displayMessage("Pallet was succesfully blocked!");

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JComponent;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.SwingConstants;

import net.sourceforge.jdatepicker.impl.JDatePanelImpl;
import net.sourceforge.jdatepicker.impl.JDatePickerImpl;
import net.sourceforge.jdatepicker.impl.UtilDateModel;

public class SearchPane extends BasicPane {
	private static final long serialVersionUID = 1;
	final static String CHOOSEPANEL = "Please choose searching method";
	final static String TEXTPANEL = "Search by pallet number";
	final static String CALENDERPANEL = "Search pallet by date";
	final static String ALLPANEL = "Search all pallets";
	final static String allCookieTypes = "Search for any cookie type";


	private DefaultListModel<Pallet> palletListModel;
	private JList<Pallet> palletList;
	// komponenten som innehåller valet av kaka/ingr
	private JComboBox<String> ingrBox;
	private JComboBox<String> cookieBox;
	private JPanel chosenPanel;

	public SearchPane(Database db) {
		super(db);
	}

	public JComponent createTopPanel() {
		JPanel p1 = new JPanel();

		JButton b1 = new JButton("Details");
		JButton b2 = new JButton("Block");
		JButton b3 = new JButton("Unblock");
		JCheckBox b4 = new JCheckBox("Only blocked");
		
		b1.addActionListener(new DetailActionListener());
		b2.addActionListener(new BlockActionListener());
		b3.addActionListener(new BlockActionListener());
		b4.addActionListener(new BlockMarkActionListener());

		p1.add(b1);
		p1.add(b2);
		p1.add(b3);
		p1.add(b4);

		JPanel p = new JPanel();
		p.add(p1);

		return p;
	}

	public JComponent createMiddlePanel() {
		JPanel p = new JPanel();
		p.setLayout(new GridLayout(1, 1));
		palletListModel = new DefaultListModel<Pallet>();
		palletList = new JList<Pallet>(palletListModel);
		palletList.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
		palletList.setFont(new Font("MONOSPACED", Font.PLAIN, 14));
		JScrollPane p2 = new JScrollPane(palletList);
		p2.setPreferredSize(new Dimension(340, 0));
		p.add(p2);
		return p;
	}

	/**
	 * Create the bottom panel, consisting of the login button and the message
	 * line.
	 * 
	 * @return The bottom panel.
	 */
	public JComponent createBottomPanel() {
		JButton[] buttons = new JButton[1];
		buttons[0] = new JButton("Search");
		ActionHandler actHand = new ActionHandler();
		return new ButtonAndMessagePanel(buttons, messageLabel, actHand);
	}
	
	public JComponent createLeftPanel() {
		JPanel p = new JPanel();
		p.setLayout(new GridLayout(2, 1));
		JPanel comboBoxPane = new JPanel();
		comboBoxPane.setLayout(new GridLayout(3, 1));

		// Fönstret man kan välja search på
		String comboBoxItems[] = { CHOOSEPANEL, TEXTPANEL, CALENDERPANEL, ALLPANEL };
		JComboBox<String> cb = new JComboBox<String>(comboBoxItems);
		cb.setEditable(false);
		cb.addItemListener(new ItemHandler());
		comboBoxPane.add(cb);

		// Fönstret man kan välja kaka
		String[] cookieBoxItems = db.getCookieNames();
		cookieBox = new JComboBox<String>(cookieBoxItems);
		cookieBox.setEditable(false);
		cookieBox.addItemListener(new ItemHandler());
		comboBoxPane.add(cookieBox);

		// Fönstret man kan välja ingrediens
		String ingrBoxItems[] = db.getIngrNames();
		ingrBox = new JComboBox<String>(ingrBoxItems);
		ingrBox.setEditable(false);
		ingrBox.addItemListener(new ItemHandler());
		comboBoxPane.add(ingrBox);
		comboBoxPane.add(ingrBox);

		// Fönstret när man inte valt sätt att välja på
		JPanel card1 = new JPanel();
		card1.setName("Empty");
		JTextField noSearch = new JTextField();
		noSearch.setText("Här kan vi skriva hur en sök går till");
		noSearch.setEditable(false);
		noSearch.setBorder(javax.swing.BorderFactory.createEmptyBorder());
		card1.add(noSearch);

		// Fönstret när man väljer att söka på id
		JPanel card2 = new JPanel();
		card2.setName("Number");
		card2.setLayout(new GridLayout(2, 1));
		JTextField text = new JTextField("Please enter the pallet number");
		text.setBorder(javax.swing.BorderFactory.createEmptyBorder());
		text.setEditable(false);
		card2.add(text);
		card2.add(new JTextField("", 20));

		// Fönstret man väljer att söka på datum
		JPanel card3 = new JPanel();
		card3.setLayout(new GridLayout(4, 1));
		card3.setName("Date");
		JTextField startText = new JTextField("Date from");
		startText.setEditable(false);
		startText.setBorder(javax.swing.BorderFactory.createEmptyBorder());
		JTextField endText = new JTextField("Date to");
		endText.setEditable(false);
		endText.setBorder(javax.swing.BorderFactory.createEmptyBorder());
		UtilDateModel startModel = new UtilDateModel();
		JDatePanelImpl startDatePanel = new JDatePanelImpl(startModel);
		JDatePickerImpl startDatePicker = new JDatePickerImpl(startDatePanel);
		UtilDateModel endModel = new UtilDateModel();
		JDatePanelImpl endDatePanel = new JDatePanelImpl(endModel);
		JDatePickerImpl endDatePicker = new JDatePickerImpl(endDatePanel);
		card3.add(startText);
		card3.add(startDatePicker);
		card3.add(endText);
		card3.add(endDatePicker);

		// Fönstret man väljer att söka på alla
		JPanel card4 = new JPanel();
		card4.setName("All");
		JTextField text1 = new JTextField("Search for all pallets by clicking search");
		text1.setBorder(javax.swing.BorderFactory.createEmptyBorder());
		text1.setEditable(false);
		card4.add(text1);

		chosenPanel = new JPanel(new CardLayout());
		chosenPanel.add(card1, CHOOSEPANEL);
		chosenPanel.add(card2, TEXTPANEL);
		chosenPanel.add(card3, CALENDERPANEL);
		chosenPanel.add(card4, ALLPANEL);

		p.add(comboBoxPane, BorderLayout.PAGE_START);
		p.add(chosenPanel, BorderLayout.CENTER);
		return p;
	}

	/**
	 * Perform the entry actions of this pane, i.e. clear the message line.
	 */
	public void entryActions() {
		clearMessage();
		palletListModel.removeAllElements();
	}

	// Denna sköter searchknappen
	class ActionHandler implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			entryActions();
			JPanel card = null;
			String chosenCookie = cookieBox.getSelectedIndex() == 0 ? "%" : cookieBox.getSelectedItem().toString();
			String chosenIngr = ingrBox.getSelectedIndex() == 0 ? "%" : ingrBox.getSelectedItem().toString();
			for (Component comp : chosenPanel.getComponents()) {
				if (comp.isVisible() == true) {
					card = (JPanel) comp;
				}
			}
			if (card.getName().equals("Date")) {
				Date startDate = (Date) ((JDatePickerImpl) card.getComponent(1)).getModel().getValue();
				DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
				String startDateFormatted = "";
				if (startDate != null) {
					startDateFormatted = df.format(startDate);
				} else {
					displayMessage("Please choose a date before searching");
					return;
				}
				Date endDate = (Date) ((JDatePickerImpl) card.getComponent(3)).getModel().getValue();
				if (endDate != null) {
					// Här hanterar vi om man bara söker på ett datumintervall.
					String endDateFormatted = df.format(endDate);
					db.searchByDate(startDateFormatted, endDateFormatted, chosenCookie, chosenIngr, palletListModel);
				} else {
					// Här hanterar vi om man bara söker på ett datum.
					db.searchByDate(startDateFormatted, chosenCookie, chosenIngr, palletListModel);
				}

			} else
			// Hämtar textfältet när man söker efter numret
			if (card.getName().equals("Number")) {
				JTextField input = (JTextField) card.getComponent(1);
				db.searchById(input.getText(), chosenCookie, chosenIngr, palletListModel);
				input.setText("");
			} else 
			
			if (card.getName().equals("All")) {
				//Söker efter alla pallar
				db.searchByAll(chosenCookie, chosenIngr, palletListModel);

			} else {
				//Här har man inte valt något söksätt
				displayMessage("Please choose which way you'd like to search!");
				return;
			}
			displayMessage("The search result is on the form \"Pallet ID | Production date | "
					+ "Cookie name | Blocked Y/N? \"");
			palletList.setModel(palletListModel);
		}
	}

	// Denna klassen hanterar de olika korten, dvs vilket söksätt man väljer
	class ItemHandler implements ItemListener {
		public void itemStateChanged(ItemEvent e) {
			entryActions();
			CardLayout c = (CardLayout) chosenPanel.getLayout();
			c.show(chosenPanel, (String) e.getItem());
			if (chosenPanel.getComponent(2).isVisible()) {
				displayMessage(
						"Please choose a date or date interval. Leave \"Date to\" empty if you want to search on a single date.");
			} else {
				displayMessage("Pro tip: You can choose multiple pallets and then press Details/Block/Unblock");
			}
		}
	}

	// Hanterar både block och unblock-knapparna
	class BlockActionListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			if (palletList.isSelectionEmpty()) {
				displayMessage("Please choose pallets before clicking here.");
				return;
			}
			List<Pallet> selectedValues = (List<Pallet>) palletList.getSelectedValuesList();
			JButton clicked = (JButton) e.getSource();
			if (clicked.getText().equals("Block")) {
				for (Pallet s : selectedValues) {
					db.blockPallet(Integer.toString(s.getPalletNbr()), " ");
					s.setIsBlocked(" ");
				}
			} else {
				for (Pallet s : selectedValues) {
					db.blockPallet(Integer.toString(s.getPalletNbr()), null);
					s.setIsBlocked(null);
				}
			}
			displayMessage("The search result is on the form \"Pallet ID | Production date | "
					+ "Cookie name | Blocked Y/N? \"");
			palletList.setModel(palletListModel);
		}
	}

	// Hanterar detailsknappen
	class DetailActionListener implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {

			if (palletList.isSelectionEmpty()) {
				displayMessage("Please choose pallets before clicking here.");
				return;
			}
			List<Pallet> selectedValues = (List<Pallet>) palletList.getSelectedValuesList();

			new PalletDetailGUI(selectedValues);
		}
	}
	
	//hanterar blocked rutan.
	class BlockMarkActionListener implements ActionListener{
		public void actionPerformed(ActionEvent arg0) {
			if(palletListModel.isEmpty()){
				return;
			}
			for(int i=0;i<palletListModel.size();i++){
				Pallet p = palletListModel.getElementAt(i);
				if(p.isBlocked()!=null){
					palletListModel.remove(i);
					i--;
				}
			}
			palletList.setModel(palletListModel);
		}
		
	}
}
